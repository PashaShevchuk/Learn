https://www.youtube.com/watch?v=n9uCgUzfeRQ
https://vladilen.notion.site/Docker-2021-a72201ec8573461c8a2e62e2fcf33aa3

    * Docker — технология для создания и управления контейнерами.
Мы оборачиваем какой то код или приложение в контейнеры для того, чтобы он нам гарантировал одинаковое поведение
в разных окружениях. Мы можем просто брать докер контейнеры и запускать их где угодно, где есть докер. Нам не важно,
что это будет за ОС, его версия. Все поведение будет зафиксировано в контейнере.

    * Containers - запускаются на основе образов
    * Images - шаблоны, только для чтения для создания контейнеров

docker ps - список контейнерів
docker image ls - список images
docker rm e6bed6a65a54 - видалити контейнер по ід
docker container prune - видаляє всі зупинені контейнери
docker rmi e6bed6a65a54 - видаляє образи (image)

    * Dockerfile - описує інстукції для створення image
docker build . - створює образ (image), крапка означає папку в якій знаходиться Dockerfile (можна вказати повний шлях, напр. /app)
docker build -t testapp . - t задає назву образа
docker build -t testapp:v1 . - : задає назву версії (тега)

docker run 62b5177c0b7b - запускає контейнер на основі створеного образа (кожен раз створює новий, з новою ід)
docker stop 2bb95c0842b1 - зупиняй образ
docker start 2bb95c0842b1 - запускає образ

docker run -p 3000:3000 62b5177c0b7b - -p означає порт, перші 3000 означають який локальний порт на локальній машині використовувати
щоб запустити контейнер, другі 3000 означають який порт з докер контейнера ми хочемо замапити на локальний порт

docker run -d -p 3000:3000 62b5177c0b7b - -d означає не заходити в консольку контейнера, запустиит його у фоновому режимі

docker start VS docker run:
run - для роботи з образами, при запуску кожен раз створює новий контейнер
start - для роботи з контейнерами, запускає інснуючий контейнер

docker attach 5dcc2165bd3f - зайти в процес який запущений в докер контейнері

docker run -d -p 3000:3000 --name testapp 62b5177c0b7b - використовуючи name можемо задати імя для контейнера, потім по імені зручно доступатися до контейнера
docker run -d -p 3000:3000 --name testapp --rm 62b5177c0b7b - rm означає, що після того як контейнер буде зупинений він автоматично видалиться
docker run -d -p 3000:3000 --name testapp --rm testapp:v1 - testapp:v1 запустити образ з назвою testapp та тегом v1
docker run -d -p 3000:4200 -e PORT=4200 --name testapp --rm testapp:v1 - -e означає створення зміної, PORT наззва зміної, 4200 значення
docker run -d -p 3000:4200 -e PORT=4200 -e SMT=80 --name testapp --rm testapp:v1 - додавання декількох змін
docker run -d -p 3000:4200 --env-file ./.env --name testapp --rm - використання .env файла --env-file, шдях до файла ./.env
docker run -d -p 3000:4200 --env-file ./.env -v logs:/app/data --rm --name logsapp logsapp:v1 - -v додає volume, logs: - назва volume (якщо не вказати - буде анонімним)
                                                                                                /app/data - шлях де буде зберігатися, можна додавати декілька volume одночасно

docker run -d -p 3000:4200 --env-file ./.env -v "/home/pavlo-shevchuk/Learn/docker/logs-app/:/app" -v /app/node_modules -v logs:/app/data --rm --name logsapp logsapp:volumes
    запустить контейнер в режимі в якому можна міняти файли (напр. index.ejs) та відразу бачити результат (завдяки volume код маунтиться в контейнер)

.dockerignore - файл у якому перелічуємо файли та папки які не хочемо щоб пушилися в Docker

    * Volumes - папка на локальному ПК, яка використовується як загальна папка для різних контейнерів, які можуть отримати до неї доступ
docker volume ls - список volume
docker volume inspect logs - деталі volume з назвою logs
docker volume create logs - створить volume logs
docker volume rm logs - видалить volume logs

    * docker-compose - Как docker может управлять отдельно взятым контейнером, так docker-compose помогает управлять не просто одним,
                       а всеми контейнерами, которые составляют распределенное приложение. Причём, не только контейнерами, но и сетями,
                       подключёнными папками и всеми связанными с этим настройками.
зразок файла:
version: '2'
services:
    web:
        build: ./web-app

        # вказує порядок запуску контейнерів, першим буде db
        depends_on:
        - db
    db:
        image: mysql
        environment:
        - MYSQL_ROOT_PASSWORD=somepassword

docker-compose up - Запускает приложения с нуля: создаёт сети, если нужно, собирает Dockerfile и запускает контейнера.
                     Если добавить -d  параметр (как и в docker run -d ), то приложение запуститься в фоновом процессе.
docker-compose ps - Команда ps покажет, какие из контейнеров приложения запущены. Эта команда очень похожа на docker ps.
docker-compose down- откатывает назад всё, что сделала up, останавливает и затем удаляет контейнеры и сети.
docker-compose start/stop - Иногда в уже запущенном приложении нужно остановить какой-нибудь компонент-контейнер не удаляя его.
                            Вот тут будут полезны start  и stop. docker-compose start web

