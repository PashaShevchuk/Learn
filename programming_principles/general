https://web-creator.ru/articles

    * SOLID — это аббревиатура пяти основных принципов проектирования в объектно-ориентированном программировании

Single responsibility — принцип единственной ответственности. Обозначает, что каждый объект должен иметь одну обязанность
    и эта обязанность должна быть полностью инкапсулирована в класс. Все его сервисы должны быть направлены исключительно
    на обеспечение этой обязанности.

Open-closed — принцип открытости / закрытости. Декларирует, что программные сущности (классы, модули, функции и т. п.)
    должны быть открыты для расширения, но закрыты для изменения. Это означает, что эти сущности могут менять свое
    поведение без изменения их исходного кода.

Liskov substitution — принцип подстановки Барбары Лисков. В формулировке Роберта Мартина: «функции, которые используют
    базовый тип, должны иметь возможность использовать подтипы базового типа не зная об этом».

Interface segregation — принцип разделения интерфейса. В формулировке Роберта Мартина: «клиенты не должны зависеть от
    методов, которые они не используют». Принцип разделения интерфейсов говорит о том, что слишком «толстые» интерфейсы
    необходимо разделять на более маленькие и специфические, чтобы клиенты маленьких интерфейсов знали только о методах,
    которые необходимы им в работе. В итоге, при изменении метода интерфейса не должны меняться клиенты, которые этот
    метод не используют.

Dependency inversion — принцип инверсии зависимостей. Модули верхних уровней не должны зависеть от модулей нижних уровней,
    а оба типа модулей должны зависеть от абстракций; сами абстракции не должны зависеть от деталей, а вот детали должны
    зависеть от абстракций.

------------------------------------------------------------------------------------------------------------------------
    * YAGNI - следование данному принципу заключается в том, что возможности, которые не описаны в требованиях к системе,
просто не должны реализовываться. Это позволяет вести разработку, руководствуясь экономическими критериями — Заказчик
не должен оплачивать ненужные ему функции, а разработчики не должны тратить своё оплачиваемое время на реализацию того,
что не требуется.
    Подход к реализации проектов строго по ТЗ верен с нескольких ракурсов. Заказчик не должен платить за то, что ему не
надо, а продукт должен быть максимально сопровождаем и его качество не должно страдать от интеграции ненужных функций.

------------------------------------------------------------------------------------------------------------------------
    * DRY — don’t repeat yourself / не повторяйте себя - следование принципу программирования «DRY» позволяет добиться
высокой сопровождаемости проекта, простоты внесения изменений и качественного тестирования.
    Если код не дублируется, то для изменения логики достаточно внесения исправлений всего в одном месте и проще
тестировать одну (пусть и более сложную) функцию, а не набор из десятков однотипных. Следование принципу DRY всегда
приводит к декомпозиции сложных алгоритмов на простые функции. А декомпозиция сложных операций на более простые
(и повторно используемые) значительно упрощает понимание программного кода. Повторное использование функций, вынесенных
из сложных алгоритмов, позволяет сократить время разработки и тестирования новой функциональности.
    Следование принципу DRY приводит к модульной архитектуре приложения и к чёткому разделению ответственности за
бизнес-логику между программными классами.
    В пректировании DRY тоже имеет место — доступ к конкретному функционалу должен быть доступен в одном месте,
унифицирован и сгруппирован по какому-либо принципу, а не «разбросан» по системе в произвольных вариациях. Этот подход
пересекается с принципом единственной ответственности из пяти принципов SOLID.

------------------------------------------------------------------------------------------------------------------------
    * KISS (keep it short and simple) - Большая часть программных систем необосновано перегружена практически ненужными
функциями, что ухудшает удобство их использование конечными пользователями, а также усложняет их поддержку и развитие
разработчиками. Следование принципу «KISS» позволяет разрабатывать решения, которые просты в использовании и в сопровождении.
    KISS — это принцип проектирования и программирования, при котором простота системы декларируется в качестве основной
цели или ценности.
    В программировании следование принципу KISS можно описать так:
- не имеет смысла беспредельно увеличивать уровень абстракции, надо уметь вовремя остановиться;
- бессмысленно закладывать в проект избыточные функции «про запас», которые может быть когда-нибудь кому-либо понадобятся;
- не стоит подключать огромную библиотеку, если вам от неё нужна лишь пара функций;
- декомпозиция чего-то сложного на простые составляющие — это архитектурно верный подход;
- абсолютная математическая точность или предельная детализация нужны не всегда — большинство систем создаются не для
запуска космических шаттлов, данные можно и нужно обрабатывать с той точностью, которая достаточна для качественного
решения задачи, а детализацию выдавать в нужном пользователю объёме, а не в максимально возможном объёме.

------------------------------------------------------------------------------------------------------------------------
    * Microservices architecture - это подход, при котором система строится как набор независимых и слабосвязанных сервисов,
которые можно создавать, используя различные языки программирования и технологии хранения данных. Концепция микросервисов
позволяет поддерживать слабую связанность сервисов в процессе работы над системой, что определяют паттерны Low Coupling
и High Cohesion.
    Микросервисы завоёвывают всё большую популярность среди разработчиков, они хороши для крупных интернет-проектов,
обслуживающих большое количество пользователей. Если случится сбой в одном сервисе, то остальные спокойно продолжат
свою работу: это очень важно для больших и сложных систем. При нововведениях можно просто написать новый сервис, он
легко впишется во всю систему, не придётся заниматься проблемами совместимости. Более того, в работу можно включать несколько
независимых друг от друга команд, использующих разные языки программирования: микросервисы позволяют это сделать.
