1. timers: setTimeout, setInterval
2. pending callbacks: I/O операції які працюють з конекшином до мережі, та колбеки з помилками. На цій фазі виконуються I/O колбеки,
   відкладені з попередньої ітерації циклу. Наприклад, помилки, колбеки яких не були виконані раніше через спроби системи їх виправити.
3. idle, prepare: немає доступу до цієї фази, libuv сам туди заходить, виконуються внутрішні операції libuv та підготовка
   до poll фази. (напр. підготовка перед читанням файла)
4. poll: I/O операції (читання файлу)
5. check: setImmediate
6. close callbacks: колбеки виду close (.onClose, socket.on('close'), ...)

    Якщо check не пустий, тоді буде ігноруватися poll і буде виконуватися check.

- nextTickQueue: кобеки які додаються через process.nextTick
- Microtasks queue: promises

	Якщо Event Loop не знаходиться на фазах, то йде виконувати пріоритетні черги:
колбеки в nextTick, microtasks queue і наступна стадія.

	Event Loop за замовчуванням працює в дефолтному режимі (крутиться поки є колеки).
Є ще режим once (раз прокрутився та закінчив роботу) - в ноді немає доступу до цього режиму.

https://dou.ua/forums/topic/31698/
    * Бібліотека libuv створює пул потоків (WORKER THREADS) для виконання асинхронних операцій, які використовуються тільки чотирма
вбудованими частинами NodeJS, а саме модулями fs, crypto, zlib та для DNS-пошуку. Всі інші операції використовують
основний потік, в якому опрацьовується цикл подій.

    * По умолчанию, libuv создает пул, состоящий из четырех потоков, которым могут обрабатываться асинхронные вызовы.
Но современные операционные системы предоставляют асинхронные интерфейсы для большинства задач ввода-вывода, например
AOI в Linux. Там, где это возможно, libuv использует доступные асинхронные интерфейсы, избегая использования пула потоков.
Похожая ситуация сложилась и с различным сторонним софтом, например базами данных. В данном случае, авторы драйверов
используют асинхронные интерфейсы охотнее, чем пулы потоков. В общем, пулы потоков используются для асинхронных
взаимодействий только в самых крайних случаях.


