https://medium.com/@andrey.igorevich.borisov/%D0%B5%D1%89%D0%B5-%D1%80%D0%B0%D0%B7-%D0%BE-%D0%BF%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D0%B0%D1%85-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-es6-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1-1a049f0a0dd3

    * Design patterns (шаблоны проектирования) - это объектно-ориентированные решения, часто встречающихся задач в
разработке. В теории паттерны не являются готовым кодом, а скорее описывают общее решение проблем, которые потом можно
трансформировать в код.

    Паттерны разделены на три категории:
- Порождающие (Creational)
- Структурные (Structural)
- Поведенческие (Behavioral)

    * Паттерн Abstract Factory - это порождающий шаблон, который позволяет создавать объекты или классы объединённые
общей тематикой, не привязываясь к конкретным объектам или классам создаваемых объектов.

    * Паттерн Builder - это порождающий паттерн, который позволяет создавать сложные объекты или классы поэтапно. Он
предоставляет возможность использовать один и тот же код для получения разных представлений объектов или классов.

    * Factory method - это порождающий паттерн проектирования, который использует полиморфизм - объекты или классы
наследуются от одного абстрактного базового объекта или класса, предназначенного для полиморфного использования. В этом
объекте или классе определяется единый интерфейс, через который будут происходить операции с конечными объектами или классами.
Паттерн Factory Method подразумевает создание объектов не через оператор new, а через вызов фабричного метода.

    * Паттерн Prototype - это порождающий шаблон, который позволяет создавать новые, уже инициализированные, объекты или
классы на основе исходного. Prototype полезен в тех ситуациях, когда на основе исходного объекта или класса вам необходимо
создать несколько клонов с похожими свойствами. Например, он может быть полезен при разработке онлайн игр, когда от
базового функционала юнита реализуют новые схожие типы.

    * Паттерн Singleton - это порождающий шаблон, который гарантирует, что в системе существует только единственный
экземпляр объекта или класса и предоставляет к нему точку доступа. Singleton полезен в тех ситуациях, когда дополнительные
экземпляры способны нарушить работоспособность приложения. Например, он полезен при проектировке работы с базами данных,
чтобы избежать лишних подключений.
